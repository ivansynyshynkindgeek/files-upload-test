plugins {
    id "com.diffplug.eclipse.apt" version "3.22.0"
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.3.3"
}

version = "0.1"
group = "com.example"

repositories {
    mavenCentral()
    jcenter()
}

//local run
//micronaut {
//    runtime("netty")
//    testRuntime("junit5")
//    processing {
//        incremental(true)
//        annotations("com.example.*")
//    }
//}

dependencies {
    annotationProcessor(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut:micronaut-validation")
    annotationProcessor("io.micronaut:micronaut-graal")
    compileOnly(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    compileOnly("org.graalvm.nativeimage:svm")
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut.aws:micronaut-function-aws-api-proxy")
    implementation("io.micronaut.aws:micronaut-function-aws-custom-runtime")
    implementation(platform('com.amazonaws:aws-java-sdk-bom:1.11.951'))
    implementation ('com.amazonaws:aws-java-sdk-s3')
    implementation ('com.amazonaws:aws-java-sdk-core')
    runtimeOnly("ch.qos.logback:logback-classic")
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation("io.micronaut.test:micronaut-test-spock")
}

test.classpath += configurations.developmentOnly

mainClassName = "io.micronaut.function.aws.runtime.MicronautLambdaRuntime"

test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion("1.8")
    targetCompatibility = JavaVersion.toVersion("1.8")
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
            '-parameters',
            '-Amicronaut.processing.incremental=true',
            '-Amicronaut.processing.annotations=se.spedweb.*',
            "-Amicronaut.processing.group=$project.group",
            "-Amicronaut.processing.module=$project.name",
    ])
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
                'micronaut.io.watch.restart':'true',
                'micronaut.io.watch.enabled':'true',
                "micronaut.io.watch.paths":"src/main"
        )
    }
}